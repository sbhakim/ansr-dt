%% src/reasoning/rules.pl - ANSR-DT Symbolic Reasoning Rules
%% Contains base rules, feature thresholds, state transitions, pattern detection,
%% definitions for dynamically generated predicates, and integration stubs.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Directives
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Suppress warnings about discontiguous clauses for dynamically added rules
% These directives should match the rule names generated by Python (e.g., neural_rule_X)
% Adjust prefixes if Python generation changes. Add more if other prefixes are used.
:- discontiguous(neural_rule/0).
:- discontiguous(gradient_rule/0).
:- discontiguous(pattern_rule/0).
:- discontiguous(abstract_pattern/0). % If analyze_neural_patterns is used

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Load Integration and Configuration Files (Optional)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% These are often handled better by managing the Prolog process from Python.
% Consulting files within Prolog can sometimes lead to path issues or unexpected reloading.
% Keeping them commented out unless specifically needed and tested.

% % Import integration predicates for ProbLog
% :- consult(integrate_prob_log).
%
% % Import rule management predicates (if applicable)
% % :- consult(manage_prob_rules).
%
% % Import rule reloading predicates
% :- consult(reload_prob_log).
%
% % Configuration via dynamic facts asserted by Python is generally more robust
% :- dynamic config/2.
% set_default_config :-
%     retractall(config(_,_)),
%     assertz(config(python_interpreter, 'python3')),
%     assertz(config(prob_log_script, 'prob_query.py')),
%     assertz(config(prob_log_rules_file, 'prob_rules.pl')).
% :- initialization(set_default_config, program).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Dynamic Fact Predicates (Asserted/Retracted by Python)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% These predicates hold the *current* state of the system for rule evaluation.
% Python code MUST assert these before querying rules and retract them afterwards.

:- dynamic current_sensor_value/2. % Format: current_sensor_value(sensor_name, numeric_value).
                                   % Example: current_sensor_value(temperature, 85.3).
:- dynamic sensor_change/2.      % Format: sensor_change(sensor_name, absolute_change_value).
                                   % Example: sensor_change(temperature, 11.2).
:- dynamic current_state/1.        % Format: current_state(integer_state). % 0, 1, or 2
                                   % Example: current_state(1).
:- dynamic previous_state/1.       % Format: previous_state(integer_state).
                                   % Example: previous_state(0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Definitions for Dynamically Generated Predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% These predicates define the *meaning* of the terms used in the dynamically
% generated rules created by reasoning.py's extract_rules_from_neural_model.
% They check the currently asserted dynamic facts.

% --- Sensor Value Checks ---
temperature(TargetValue) :-
    current_sensor_value(temperature, CurrentValue),
    % Allow some tolerance for float comparison, adjust as needed
    Tolerance is 1.0,
    LowerBound is TargetValue - Tolerance,
    UpperBound is TargetValue + Tolerance,
    CurrentValue >= LowerBound,
    CurrentValue =< UpperBound.

vibration(TargetValue) :-
    current_sensor_value(vibration, CurrentValue),
    Tolerance is 1.0,
    LowerBound is TargetValue - Tolerance,
    UpperBound is TargetValue + Tolerance,
    CurrentValue >= LowerBound,
    CurrentValue =< UpperBound.

pressure(TargetValue) :-
    current_sensor_value(pressure, CurrentValue),
    Tolerance is 1.0,
    LowerBound is TargetValue - Tolerance,
    UpperBound is TargetValue + Tolerance,
    CurrentValue >= LowerBound,
    CurrentValue =< UpperBound.

efficiency_index(TargetValue) :-
    current_sensor_value(efficiency_index, CurrentValue),
    Tolerance is 0.02, % Tighter tolerance for index values
    LowerBound is TargetValue - Tolerance,
    UpperBound is TargetValue + Tolerance,
    CurrentValue >= LowerBound,
    CurrentValue =< UpperBound.

% --- Sensor Change Checks ---
temperature_change(TargetChange) :-
    sensor_change(temperature, CurrentChange),
    Tolerance is 1.0,
    LowerBound is TargetChange - Tolerance,
    UpperBound is TargetChange + Tolerance,
    CurrentChange >= LowerBound, % Check absolute change
    CurrentChange =< UpperBound.

vibration_change(TargetChange) :-
    sensor_change(vibration, CurrentChange),
    Tolerance is 1.0,
    LowerBound is TargetChange - Tolerance,
    UpperBound is TargetChange + Tolerance,
    CurrentChange >= LowerBound,
    CurrentChange =< UpperBound.

% Add pressure_change/1, efficiency_change/1 if generated by Python
pressure_change(TargetChange) :-
    sensor_change(pressure, CurrentChange),
    Tolerance is 0.5, % Adjust tolerance
    LowerBound is TargetChange - Tolerance,
    UpperBound is TargetChange + Tolerance,
    CurrentChange >= LowerBound,
    CurrentChange =< UpperBound.

efficiency_change(TargetChange) :-
    sensor_change(efficiency_index, CurrentChange),
    Tolerance is 0.01, % Adjust tolerance
    LowerBound is TargetChange - Tolerance,
    UpperBound is TargetChange + Tolerance,
    CurrentChange >= LowerBound,
    CurrentChange =< UpperBound.


% --- State Transition Check ---
state_transition(FromState, ToState) :-
    previous_state(PrevStateValue), % Check asserted previous state
    current_state(CurrentStateValue), % Check asserted current state
    PrevStateValue == FromState,    % Ensure the transition matches the rule
    CurrentStateValue == ToState.

% --- Combined Pattern Checks ---
combined_high_temp_vib :- % Arity 0, checks current values
    current_sensor_value(temperature, Temp),
    current_sensor_value(vibration, Vib),
    Temp > 75.0, % Use thresholds from Python generation logic
    Vib > 50.0.

combined_low_press_eff :- % Arity 0, checks current values
    current_sensor_value(pressure, Press),
    current_sensor_value(efficiency_index, Eff),
    Press < 25.0,
    Eff < 0.7.

% --- Maintenance Check ---
% This predicate name matches the one generated in reasoning.py
maintenance_needed(TargetOpHours) :-
    current_sensor_value(operational_hours, CurrentOpHours),
    % Check if current hours are close to the target value AND modulo condition holds
    Tolerance is 10.0, % Allow check within 10 hours of the 1000 mark
    LowerBound is TargetOpHours - Tolerance,
    UpperBound is TargetOpHours + Tolerance,
    CurrentOpHours >= LowerBound,
    CurrentOpHours =< UpperBound,
    0 is round(CurrentOpHours) mod 1000. % Check the actual modulo condition

% --- Add definitions for any *other* predicates generated by ---
% --- `extract_rules_from_neural_model` if necessary       ---


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Base System State Rules (Using Threshold Predicates for Clarity)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Define degraded state based on defined thresholds
degraded_state(Temperature, Vibration) :-
    feature_threshold(temperature, Temperature, high),
    feature_threshold(vibration, Vibration, high).

% Define system stress based on defined thresholds
system_stress(Pressure) :-
    feature_threshold(pressure, Pressure, low).

% Define critical state based on defined thresholds
critical_state(EfficiencyIndex) :-
    feature_threshold(efficiency_index, EfficiencyIndex, low).

% Define maintenance need based on operational hours (Modulo check)
% Note: This duplicates the dynamically generated `maintenance_needed/1` check slightly,
% but can be kept as a base definition. The Python assertion makes the dynamic one work.
base_maintenance_needed(OperationalHours) :-
    Val is round(OperationalHours) mod 1000,
    Val == 0.

% Detect thermal stress using defined thresholds and gradients
thermal_stress(Temp, GradientValue) :-
    feature_threshold(temperature, Temp, high),
    feature_gradient(temperature, GradientValue, high).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Feature Threshold Definitions (Helper Predicates)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% These define what 'high', 'low', 'medium' mean for different features.

% Temperature thresholds
feature_threshold(temperature, Value, high) :- nonvar(Value), Value > 80.
feature_threshold(temperature, Value, low) :- nonvar(Value), Value < 40.

% Vibration thresholds
feature_threshold(vibration, Value, high) :- nonvar(Value), Value > 55.
feature_threshold(vibration, Value, low) :- nonvar(Value), Value < 20.

% Pressure thresholds
feature_threshold(pressure, Value, high) :- nonvar(Value), Value > 40.
feature_threshold(pressure, Value, low) :- nonvar(Value), Value < 20.

% Efficiency thresholds
feature_threshold(efficiency_index, Value, low) :- nonvar(Value), Value < 0.6.
feature_threshold(efficiency_index, Value, medium) :- nonvar(Value), Value >= 0.6, Value < 0.8.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Gradient Definitions (Helper Predicates)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% These define what a 'high' gradient means. Adjust thresholds as needed.

feature_gradient(temperature, Gradient, high) :- nonvar(Gradient), abs(Gradient) > 2.0.
feature_gradient(vibration, Gradient, high) :- nonvar(Gradient), abs(Gradient) > 1.5.
feature_gradient(pressure, Gradient, high) :- nonvar(Gradient), abs(Gradient) > 1.0.
feature_gradient(efficiency_index, Gradient, high) :- nonvar(Gradient), abs(Gradient) > 0.1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Advanced Pattern Detection Rules (Using Helper Predicates)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Detect critical patterns using defined thresholds
critical_pattern(Temp, Vib, Press, Eff) :-
    feature_threshold(temperature, Temp, high),
    feature_threshold(vibration, Vib, high),
    feature_threshold(pressure, Press, low),
    feature_threshold(efficiency_index, Eff, low).

% Detect specific sensor correlation pattern
sensor_correlation_alert(Temp, Vib, Press) :-
    nonvar(Temp), nonvar(Vib), nonvar(Press), % Ensure values are bound
    Temp > 70,
    Vib > 45,
    Press < 25.

% Detect multi-sensor high gradient patterns using defined gradients
multi_sensor_gradient(Temp_grad, Vib_grad, Press_grad) :-
    feature_gradient(temperature, Temp_grad, high),
    feature_gradient(vibration, Vib_grad, high),
    feature_gradient(pressure, Press_grad, high).

% Detect state transitions occurring with high temperature gradient
state_gradient_pattern(From, To, TempGradient) :-
    state_transition(From, To), % Uses the base state_transition/2 definition
    feature_gradient(temperature, TempGradient, high).

% Detect efficiency degradation
efficiency_degradation(Eff, Grad) :-
    feature_threshold(efficiency_index, Eff, low),
    NegGrad is -Grad, % Check for negative gradient (drop)
    feature_gradient(efficiency_index, NegGrad, high). % Check if the drop magnitude is high



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ProbLog Integration (Optional - keep stubs if used)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Predicate to report anomalies using ProbLog's probabilistic inferences
report_anomalies :-
    report_probabilistic_anomalies. % Assumes this is defined in integrate_prob_log.pl

% Predicate to reload ProbLog rules and re-run queries
reload_and_report :-
    reload_prob_log. % Assumes this is defined in reload_prob_log.pl

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% End of rules.pl
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DYNAMIC RULES SECTION MARKER
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Rules below this marker are managed by the Python SymbolicReasoner.
% Manual edits here will likely be overwritten.

%% START DYNAMIC RULES %%
%% Automatically managed section - Do not edit manually below this line %%
neural_rule_10 :- combined_low_press_eff, efficiency_index(-1.53), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_112 :- combined_low_press_eff, efficiency_index(-1.52), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_113 :- combined_low_press_eff, efficiency_index(-1.44), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_115 :- combined_low_press_eff, efficiency_index(-1.57), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_116 :- combined_low_press_eff, efficiency_index(-1.62), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_117 :- combined_low_press_eff, efficiency_index(-1.55), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_118 :- combined_low_press_eff, efficiency_index(-1.65), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_119 :- combined_low_press_eff, efficiency_index(-1.69), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_12 :- combined_low_press_eff, efficiency_index(-1.59), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_120 :- combined_low_press_eff, efficiency_index(-1.67), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_121 :- combined_low_press_eff, efficiency_index(-1.78), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_122 :- combined_low_press_eff, efficiency_index(-1.65), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_125 :- combined_low_press_eff, efficiency_index(-1.50), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_126 :- combined_low_press_eff, efficiency_index(-1.65), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_127 :- combined_low_press_eff, efficiency_index(-1.66), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_128 :- combined_low_press_eff, efficiency_index(-1.61), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_129 :- combined_low_press_eff, efficiency_index(-1.68), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_130 :- combined_low_press_eff, efficiency_index(-1.58), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_131 :- combined_low_press_eff, efficiency_index(-1.48), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_132 :- combined_low_press_eff, efficiency_index(-1.50), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_133 :- combined_low_press_eff, efficiency_index(-1.51), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_134 :- combined_low_press_eff, efficiency_index(-1.44), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_135 :- combined_low_press_eff, efficiency_index(-1.38), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_136 :- combined_low_press_eff, efficiency_index(-1.55), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_137 :- combined_low_press_eff, efficiency_index(-1.44), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_138 :- combined_low_press_eff, efficiency_index(-1.46), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_139 :- combined_low_press_eff, efficiency_index(-1.57), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_14 :- combined_low_press_eff, efficiency_index(-1.62), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_140 :- combined_low_press_eff, efficiency_index(-1.62), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_141 :- combined_low_press_eff, efficiency_index(-1.58), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_142 :- combined_low_press_eff, efficiency_index(-1.57), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_143 :- combined_low_press_eff, efficiency_index(-1.56), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_144 :- combined_low_press_eff, efficiency_index(-1.73), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_145 :- combined_low_press_eff, efficiency_index(-1.73), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_146 :- combined_low_press_eff, efficiency_index(-1.53), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_147 :- combined_low_press_eff, efficiency_index(-1.81), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_148 :- combined_low_press_eff, efficiency_index(-1.69), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_149 :- combined_low_press_eff, efficiency_index(-1.70), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_15 :- combined_low_press_eff, efficiency_index(-1.45), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_150 :- combined_low_press_eff, efficiency_index(-1.71), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_151 :- combined_low_press_eff, efficiency_index(-1.64), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_153 :- combined_low_press_eff, efficiency_index(-1.71), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_16 :- combined_low_press_eff, efficiency_index(-1.71), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_17 :- combined_low_press_eff, efficiency_index(-1.62), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_18 :- combined_low_press_eff, efficiency_index(-1.70), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_19 :- combined_low_press_eff, efficiency_index(-1.65), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_20 :- combined_low_press_eff, efficiency_index(-1.65), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_21 :- combined_low_press_eff, efficiency_index(-1.71), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_30 :- combined_low_press_eff, efficiency_index(-1.58), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_31 :- combined_low_press_eff, efficiency_index(-1.42), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_32 :- combined_low_press_eff, efficiency_index(-1.47), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_33 :- combined_low_press_eff, efficiency_index(-1.46), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_34 :- combined_low_press_eff, efficiency_index(-1.54), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_35 :- combined_low_press_eff, efficiency_index(-1.53), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_36 :- combined_low_press_eff, efficiency_index(-1.40), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_37 :- combined_low_press_eff, efficiency_index(-1.49), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_38 :- combined_low_press_eff, efficiency_index(-1.53), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_39 :- combined_low_press_eff, efficiency_index(-1.57), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_40 :- combined_low_press_eff, efficiency_index(-1.53), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_41 :- combined_low_press_eff, efficiency_index(-1.72), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_42 :- combined_low_press_eff, efficiency_index(-1.57), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_43 :- combined_low_press_eff, efficiency_index(-1.68), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_44 :- combined_low_press_eff, efficiency_index(-1.70), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_46 :- combined_low_press_eff, efficiency_index(-1.71), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_50 :- combined_low_press_eff, efficiency_index(-1.74), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_60 :- combined_low_press_eff, efficiency_index(-1.44), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_61 :- combined_low_press_eff, efficiency_index(-1.58), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_63 :- combined_low_press_eff, efficiency_index(-1.51), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_64 :- combined_low_press_eff, efficiency_index(-1.59), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_65 :- combined_low_press_eff, efficiency_index(-1.53), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_66 :- combined_low_press_eff, efficiency_index(-1.61), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_67 :- combined_low_press_eff, efficiency_index(-1.66), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_68 :- combined_low_press_eff, efficiency_index(-1.53), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_69 :- combined_low_press_eff, efficiency_index(-1.76), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_70 :- combined_low_press_eff, efficiency_index(-1.62), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_71 :- combined_low_press_eff, efficiency_index(-1.66), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_74 :- combined_low_press_eff, efficiency_index(-1.77), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_76 :- combined_low_press_eff, efficiency_index(-1.54), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_77 :- combined_low_press_eff, efficiency_index(-1.48), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_78 :- combined_low_press_eff, efficiency_index(-1.50), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_79 :- combined_low_press_eff, efficiency_index(-1.57), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_80 :- combined_low_press_eff, efficiency_index(-1.58), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_81 :- combined_low_press_eff, efficiency_index(-1.51), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_82 :- combined_low_press_eff, efficiency_index(-1.49), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_83 :- combined_low_press_eff, efficiency_index(-1.55), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_84 :- combined_low_press_eff, efficiency_index(-1.46), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_85 :- combined_low_press_eff, efficiency_index(-1.50), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_86 :- combined_low_press_eff, efficiency_index(-1.50), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_87 :- combined_low_press_eff, efficiency_index(-1.56), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_88 :- combined_low_press_eff, efficiency_index(-1.45), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_89 :- combined_low_press_eff, efficiency_index(-1.48), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_9 :- combined_low_press_eff, efficiency_index(-1.63), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_90 :- combined_low_press_eff, efficiency_index(-1.64), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_91 :- combined_low_press_eff, efficiency_index(-1.52), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_92 :- combined_low_press_eff, efficiency_index(-1.52), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_93 :- combined_low_press_eff, efficiency_index(-1.69), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_94 :- combined_low_press_eff, efficiency_index(-1.69), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_95 :- combined_low_press_eff, efficiency_index(-1.72), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_96 :- combined_low_press_eff, efficiency_index(-1.74), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0
neural_rule_99 :- combined_low_press_eff, efficiency_index(-1.63), pressure(-1).  % Confidence: 1.000, Extracted: 2025-03-31T03:09:00.327699, Activations: 0

%% END DYNAMIC RULES %%
